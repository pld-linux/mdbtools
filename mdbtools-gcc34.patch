--- mdbtools-0.5/src/gmdb2/sql.c.orig	2003-01-15 03:02:07.000000000 +0100
+++ mdbtools-0.5/src/gmdb2/sql.c	2004-04-30 21:52:23.102180320 +0200
@@ -132,6 +132,69 @@
 	sprintf(msg,"%d Rows exported successfully.\n", rows);
 	gnome_ok_dialog(msg);
 }
+
+/* functions */
+gchar *
+gmdb_sql_get_basename(char *file_path)
+{
+	int i, len;
+	gchar *basename;
+
+	for (i=strlen(file_path);i>=0 && file_path[i]!='/';i--);
+	len = strlen(file_path) - i + 2;
+	basename = g_malloc(len);
+	if (file_path[i]=='/') {
+		strncpy(basename,&file_path[i+1],len);
+	} else {
+		strncpy(basename,file_path,len);
+	}
+        basename[len]='\0';
+
+	return basename;
+}
+
+void
+gmdb_sql_set_file(GladeXML *xml, gchar *file_name)
+{
+	GtkWidget *window, *textview;
+	gchar *title;
+	gchar *basename;
+	gchar *suffix = " - MDB Query Tool";
+
+	basename = gmdb_sql_get_basename(file_name);
+	title = g_malloc(strlen(basename) + strlen(suffix) + 1);
+	sprintf(title,"%s%s", basename, suffix); 
+	g_free(basename);
+	window = glade_xml_get_widget(xml, "sql_window");
+	gtk_window_set_title(GTK_WINDOW(window), title);
+	g_free(title);
+	textview = glade_xml_get_widget(xml, "sql_textview");
+	g_object_set_data(G_OBJECT(textview), "file_name", file_name);
+}
+
+void
+gmdb_sql_save_query(GladeXML *xml, gchar *file_path)
+{
+	FILE *out;
+	GtkWidget *textview;
+        GtkTextBuffer *txtbuffer;
+	GtkTextIter start, end;
+	gchar *buf;
+
+	if (!(out=fopen(file_path, "w"))) {
+		gnome_warning_dialog("Unable to open file.");
+		return;
+	}
+	textview = glade_xml_get_widget(xml, "sql_textview");
+	txtbuffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(textview));
+	gtk_text_buffer_get_start_iter(txtbuffer, &start);
+	gtk_text_buffer_get_end_iter(txtbuffer, &end);
+	buf = gtk_text_buffer_get_text(txtbuffer, &start, &end, FALSE);
+	fprintf(out,"%s\n",buf);
+	fclose(out);
+	gmdb_sql_set_file(xml, file_path);
+}
+
 void
 gmdb_sql_write_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -146,6 +209,7 @@
 
 	gtk_widget_destroy(filesel);
 }
+
 void
 gmdb_sql_load_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -160,6 +224,7 @@
 
 	gtk_widget_destroy(filesel);
 }
+
 void
 gmdb_sql_results_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -190,20 +255,7 @@
 
 	g_object_set_data(G_OBJECT(filesel), "sql_xml", xml);
 }
-void
-gmdb_sql_save_cb(GtkWidget *w, GladeXML *xml)
-{
-	GtkWidget *textview;
-	gchar *str;
 
-	textview = glade_xml_get_widget (xml, "sql_textview");
-	str = g_object_get_data(G_OBJECT(textview), "file_name");
-	if (!str) {
-		gmdb_sql_save_as_cb(w, xml);
-		return;
-	}
-	gmdb_sql_save_query(xml, str);
-}
 void
 gmdb_sql_save_as_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -226,6 +278,22 @@
 
 	g_object_set_data(G_OBJECT(filesel), "sql_xml", xml);
 }
+
+void
+gmdb_sql_save_cb(GtkWidget *w, GladeXML *xml)
+{
+	GtkWidget *textview;
+	gchar *str;
+
+	textview = glade_xml_get_widget (xml, "sql_textview");
+	str = g_object_get_data(G_OBJECT(textview), "file_name");
+	if (!str) {
+		gmdb_sql_save_as_cb(w, xml);
+		return;
+	}
+	gmdb_sql_save_query(xml, str);
+}
+
 void
 gmdb_sql_open_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -246,6 +314,7 @@
 	filesel = glade_xml_get_widget (dialog_xml, "file_dialog");
 	g_object_set_data(G_OBJECT(filesel), "sql_xml", xml);
 }
+
 void
 gmdb_sql_copy_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -258,6 +327,7 @@
 	txtbuffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(textview));
 	gtk_text_buffer_copy_clipboard(txtbuffer, clipboard);
 }
+
 void
 gmdb_sql_cut_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -270,6 +340,7 @@
 	txtbuffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(textview));
 	gtk_text_buffer_cut_clipboard(txtbuffer, clipboard, TRUE);
 }
+
 void
 gmdb_sql_paste_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -282,6 +353,7 @@
 	txtbuffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(textview));
 	gtk_text_buffer_paste_clipboard(txtbuffer, clipboard, NULL, TRUE);
 }
+
 void
 gmdb_sql_close_cb(GtkWidget *w, GladeXML *xml)
 {
@@ -320,6 +392,7 @@
 		8,  /* 8 bits per character. */
 		tablename, strlen(tablename));
 }
+
 void gmdb_sql_dnd_datareceived_cb(
         GtkWidget *w,
         GdkDragContext *dc,
@@ -581,66 +654,6 @@
 	gtk_widget_grab_focus(GTK_WIDGET(textview));
 }
 
-/* functions */
-gchar *
-gmdb_sql_get_basename(char *file_path)
-{
-	int i, len;
-	gchar *basename;
-
-	for (i=strlen(file_path);i>=0 && file_path[i]!='/';i--);
-	len = strlen(file_path) - i + 2;
-	basename = g_malloc(len);
-	if (file_path[i]=='/') {
-		strncpy(basename,&file_path[i+1],len);
-	} else {
-		strncpy(basename,file_path,len);
-	}
-        basename[len]='\0';
-
-	return basename;
-}
-
-void
-gmdb_sql_set_file(GladeXML *xml, gchar *file_name)
-{
-	GtkWidget *window, *textview;
-	gchar *title;
-	gchar *basename;
-	gchar *suffix = " - MDB Query Tool";
-
-	basename = gmdb_sql_get_basename(file_name);
-	title = g_malloc(strlen(basename) + strlen(suffix) + 1);
-	sprintf(title,"%s%s", basename, suffix); 
-	g_free(basename);
-	window = glade_xml_get_widget(xml, "sql_window");
-	gtk_window_set_title(GTK_WINDOW(window), title);
-	g_free(title);
-	textview = glade_xml_get_widget(xml, "sql_textview");
-	g_object_set_data(G_OBJECT(textview), "file_name", file_name);
-}
-void
-gmdb_sql_save_query(GladeXML *xml, gchar *file_path)
-{
-	FILE *out;
-	GtkWidget *textview;
-        GtkTextBuffer *txtbuffer;
-	GtkTextIter start, end;
-	gchar *buf;
-
-	if (!(out=fopen(file_path, "w"))) {
-		gnome_warning_dialog("Unable to open file.");
-		return;
-	}
-	textview = glade_xml_get_widget(xml, "sql_textview");
-	txtbuffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(textview));
-	gtk_text_buffer_get_start_iter(txtbuffer, &start);
-	gtk_text_buffer_get_end_iter(txtbuffer, &end);
-	buf = gtk_text_buffer_get_text(txtbuffer, &start, &end, FALSE);
-	fprintf(out,"%s\n",buf);
-	fclose(out);
-	gmdb_sql_set_file(xml, file_path);
-}
 void
 gmdb_sql_load_query(GladeXML *xml, gchar *file_path)
 {
@@ -667,6 +680,7 @@
 	fclose(in);
 	gmdb_sql_set_file(xml, file_path);
 }
+
 void 
 gmdb_sql_tree_populate(MdbHandle *mdb, GladeXML *xml)
 {
--- mdbtools-0.5/src/gmdb2/table_export.c.orig	2003-01-14 18:37:44.000000000 +0100
+++ mdbtools-0.5/src/gmdb2/table_export.c	2004-04-30 21:43:17.069189952 +0200
@@ -110,6 +110,7 @@
 
 	return quotechar;
 }
+
 int
 gmdb_export_get_headers(GladeXML *xml)	
 {
@@ -121,6 +122,7 @@
 	else
 		return 0;
 }
+
 gchar *
 gmdb_export_get_filepath(GladeXML *xml)	
 {
@@ -141,6 +143,7 @@
 		g_error_free (error);
 	}
 }
+
 void
 gmdb_table_export_button_cb(GtkWidget *w, gpointer data)
 {
@@ -219,19 +222,7 @@
 	sprintf(msg,"%d Rows exported successfully.\n", rows);
 	gnome_ok_dialog(msg);
 }
-void gmdb_table_export(MdbCatalogEntry *entry) 
-{
-GtkWidget *export_button;
-GtkWidget *close_button;
-   
-	cat_entry = entry;
 
-	/* load the interface */
-	exportwin_xml = glade_xml_new(GMDB_GLADEDIR "gmdb-export.glade", NULL, NULL);
-	/* connect the signals in the interface */
-	glade_xml_signal_autoconnect(exportwin_xml);
-	gmdb_table_export_populate_dialog(exportwin_xml);
-}
 void
 gmdb_table_export_populate_dialog(GladeXML *xml)
 {
@@ -273,3 +264,17 @@
     	gtk_combo_set_popdown_strings(GTK_COMBO(combo), glist);
 	g_list_free(glist);
 }
+
+void gmdb_table_export(MdbCatalogEntry *entry) 
+{
+GtkWidget *export_button;
+GtkWidget *close_button;
+   
+	cat_entry = entry;
+
+	/* load the interface */
+	exportwin_xml = glade_xml_new(GMDB_GLADEDIR "gmdb-export.glade", NULL, NULL);
+	/* connect the signals in the interface */
+	glade_xml_signal_autoconnect(exportwin_xml);
+	gmdb_table_export_populate_dialog(exportwin_xml);
+}
--- mdbtools-0.5/src/odbc/odbc.c.orig	2003-01-15 03:02:09.000000000 +0100
+++ mdbtools-0.5/src/odbc/odbc.c	2004-04-30 21:38:41.073147728 +0200
@@ -176,6 +176,31 @@
 	return SQL_SUCCESS;
 }
 
+static void
+bind_columns(struct _hstmt *stmt)
+{
+struct _hdbc *dbc = (struct _hdbc *) stmt->hdbc;
+struct _henv *env = (struct _henv *) dbc->henv;
+struct _sql_bind_info *cur;
+
+    if (stmt->rows_affected==0) {
+        cur = stmt->bind_head;
+        while (cur) {
+            if (cur->column_number>0 &&
+            cur->column_number <= env->sql->num_columns) {
+				mdbsql_bind_column(env->sql, 
+					cur->column_number, cur->varaddr);
+				if (cur->column_lenbind)
+					mdbsql_bind_len(env->sql, 
+						cur->column_number, cur->column_lenbind);
+            } else {
+                /* log error ? */
+            }
+            cur = cur->next;
+        }
+    }
+}
+
 SQLRETURN SQL_API SQLExtendedFetch(
     SQLHSTMT           hstmt,
     SQLUSMALLINT       fFetchType,
@@ -773,30 +798,7 @@
 	TRACE("SQLExecute");
    return _SQLExecute(hstmt);
 }
-static void
-bind_columns(struct _hstmt *stmt)
-{
-struct _hdbc *dbc = (struct _hdbc *) stmt->hdbc;
-struct _henv *env = (struct _henv *) dbc->henv;
-struct _sql_bind_info *cur;
 
-    if (stmt->rows_affected==0) {
-        cur = stmt->bind_head;
-        while (cur) {
-            if (cur->column_number>0 &&
-            cur->column_number <= env->sql->num_columns) {
-				mdbsql_bind_column(env->sql, 
-					cur->column_number, cur->varaddr);
-				if (cur->column_lenbind)
-					mdbsql_bind_len(env->sql, 
-						cur->column_number, cur->column_lenbind);
-            } else {
-                /* log error ? */
-            }
-            cur = cur->next;
-        }
-    }
-}
 SQLRETURN SQL_API SQLFetch(
     SQLHSTMT           hstmt)
 {
@@ -1445,6 +1447,7 @@
 	case SQL_DECIMAL:
 	case SQL_NUMERIC:
 	case SQL_FLOAT:
+	;
 	}
 }
 static SQLSMALLINT _odbc_get_client_type(int srv_type)
